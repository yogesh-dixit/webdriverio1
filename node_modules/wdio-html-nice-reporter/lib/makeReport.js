"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const index_1 = require("./index");
const LOG = require('log4js');
LOG.configure({
    appenders: {
        fileLog: {
            type: 'file',
            filename: "logs/makeReport.log",
            maxLogSize: 5000000,
            level: 'debug'
        },
        out: {
            type: 'stdout',
            layout: {
                type: "colored"
            },
        },
    },
    categories: {
        file: { appenders: ['fileLog'], level: 'info' },
        default: { appenders: ['out', 'fileLog'], level: 'info' },
        debug: { appenders: ['out', 'fileLog'], level: 'debug' }
    }
});
let logger = LOG.getLogger("debug");
(() => __awaiter(void 0, void 0, void 0, function* () {
    let args = process.argv.slice(2);
    let reportName = args[0] ? args[0] : "master-report.html";
    let reportFolder = args[1] ? args[1] : 'reports/html-reports/';
    try {
        // need full paths
        let htmlReportFile = path.resolve(__dirname, reportFolder + reportName);
        let options = [];
        let reportAggregator = new index_1.ReportAggregator({
            outputDir: './reports/html-reports/',
            filename: reportName,
            reportTitle: 'Micro-Magic Web Test Report',
            browserName: process.env.TEST_BROWSER ? process.env.TEST_BROWSER : 'unspecified',
            showInBrowser: true,
            LOG: logger
        });
        yield reportAggregator.createReport();
    }
    catch (ex) {
        console.error(ex);
    }
}))();
